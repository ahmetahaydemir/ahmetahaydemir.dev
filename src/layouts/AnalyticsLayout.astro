---
import HeadCommon from "../components/HeadCommon.astro";
import HeadSEO from "../components/HeadSEO.astro";
import Header from "../components/Header/Header.astro";
import { SITE } from "../consts";
import AnalyticsSidebar from "../components/Analytics/AnalyticsSidebar.astro";
import AnalyticsWorkspace from "../components/Analytics/AnalyticsWorkspace.astro";

const { headings, topTitle, ...data } = Astro.props;
const currentPage = Astro.url.pathname;
const baseDomain = "https://ahmetahaydemir.dev";
const canonicalURL = new URL(currentPage, baseDomain);
---

<html dir={data.dir} lang={data.lang} class="initial">
  <head>
    <HeadCommon />
    <HeadSEO {...data} title={topTitle} canonicalUrl={canonicalURL} />
    <title>
      {`${topTitle} ðŸš€ ${SITE.title}`}
    </title>

    <style>
      header {
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        height: var(--theme-navbar-height);
        z-index: 11;
        padding: 2rem 0;
        background-color: var(--theme-navbar-bg);
        display: flex;
        align-items: center;
        justify-content: left;
        overflow: hidden;
      }

      .analytics-container {
        display: grid;
        gap: 15px;
        padding-top: calc(var(--theme-navbar-height) * 1.1);
        padding-left: 15px;
        padding-right: 10px;
        height: 100%;
        width: 100%;
        grid-auto-columns: 250px auto;
      }
    </style>
  </head>

  <body>
    <Header currentPage={currentPage} />
    <main class="analytics-container">
      <AnalyticsSidebar currentPage={currentPage} />
      <AnalyticsWorkspace />
    </main>
    <script type="module" src="../../analytics-workspace-behaviour.js"></script>
    <script client:load>
      window.analyticsTable = document.getElementById("analytics-table");
      window.analyticsCommands = document.getElementById("analytics-commands");
      window.analyticsTableHead = analyticsTable.children[0];
      window.analyticsTableBody = analyticsTable.children[1];
      window.currentViewToggleState = document.getElementById("analytics-view-toggle");
      //
      window.analyticsComponents = document.getElementsByClassName("component-container");
      window.analyticsDimensionArray = analyticsComponents[0].children;
      window.analyticsMetricArray = analyticsComponents[1].children;
      window.analyticsSegmentArray = analyticsComponents[2].children;
      //
      analyticsCommands.children[0].children[0].addEventListener("click", SwitchAnalyticsView);
      analyticsCommands.children[1].addEventListener("click", ExecuteViewCommand);
      analyticsCommands.children[2].addEventListener("click", ClearViewCommand);
      //
      function SwitchAnalyticsView() {
        window.currentViewToggleState = document.getElementById("analytics-view-toggle");
        //
        if (window.currentViewToggleState.innerText === "Table") {
          window.currentViewToggleState.innerText = "Freeform";
          window.analyticsComponents[0].style = "";
          window.analyticsComponents[1].style = "";
        } else if (window.currentViewToggleState.innerText === "Freeform") {
          window.currentViewToggleState.innerText = "Table";
          window.analyticsComponents[0].style = "display: none";
          window.analyticsComponents[1].style = "display: none";
        }
        //
        ClearViewCommand();
      }
      //
      function ExecuteViewCommand() {
        ClearViewCommand();
        if (window.currentViewToggleState.innerText === "Table") {
          PopulateTableView();
        } else if (window.currentViewToggleState.innerText === "Freeform") {
          PopulateFreeformView();
        }
      }
      //
      function PopulateFreeformView() {
        console.log("Data Bank - Freeform Init");
        let cellCount = 4;
        // Header Row
        let headerRow = analyticsTableHead.insertRow(0);
        headerRow.className = analyticsTableHead.className;
        for (let headerIndex = 0; headerIndex < cellCount; headerIndex++) {
          let headerCell = headerRow.insertCell(headerIndex);
          headerCell.className = analyticsTableHead.className;
          if (headerIndex === 0) {
            // Dimension Header
            headerCell.className = "analytics-void-zone";
          } else {
            // Metric Header
            headerCell.innerHTML = "<th>" + analyticsMetricArray[headerIndex - 1].innerText + "</th>";
          }
        }
        // Summary Row
        headerRow = analyticsTableHead.insertRow(1);
        headerRow.className = analyticsTableHead.className;
        for (let headerIndex = 0; headerIndex < cellCount; headerIndex++) {
          let headerCell = headerRow.insertCell(headerIndex);
          headerCell.className = analyticsTableHead.className;
          if (headerIndex === 0) {
            // Dimension Header
            headerCell.innerHTML = window.ConstructComponentCell();
          } else {
            // Metric Header
            headerCell.innerHTML = "<th></th>";
          }
        }
        // Detail Row
        for (let jsonIndex = 0; jsonIndex < entityBank.length; jsonIndex++) {
          let row = analyticsTableBody.insertRow(jsonIndex);
          for (let i = 0; i < cellCount; i++) {
            let cell = row.insertCell(i);
            if (i === 0) {
              // Dimension Value
              cell.innerHTML = "<td>" + entityBank[jsonIndex].Identifier + "</td>";
            } else {
              // Metric Value
              cell.innerHTML = "<td>1</td>";
            }
          }
        }
      }
      //
      function PopulateTableView() {
        console.log("Data Bank - Table Init");
        //
        GenerateTableHeader(window.dataBankSelection);
        GenerateTableRow(window.dataBankSelection);
      }
      //
      function GenerateTableHeader(currentDataBank) {
        // Header Row
        let headerRow = analyticsTableHead.insertRow(0);
        headerRow.className = analyticsTableHead.className;
        // Header Cells
        let cellCount = Object.keys(currentDataBank[0]).length;
        for (let headerIndex = 0; headerIndex < cellCount; headerIndex++) {
          let headerCell = headerRow.insertCell(headerIndex);
          headerCell.className = analyticsTableHead.className;
          if (headerIndex === 0) {
            // Dimension Header
            headerCell.innerHTML = "<td>" + Object.keys(currentDataBank[0])[headerIndex].toString() + "</td>";
          } else {
            // Metric Header
            headerCell.innerHTML = "<th>" + Object.keys(currentDataBank[0])[headerIndex].toString() + "</th>";
          }
        }
      }
      //
      function GenerateTableRow(currentDataBank) {
        let cellCount = Object.keys(currentDataBank[0]).length;
        // Table Row
        for (let dataIndex = 0; dataIndex < currentDataBank.length; dataIndex++) {
          let row = analyticsTableBody.insertRow(dataIndex);
          // Table Cells
          for (let i = 0; i < cellCount; i++) {
            let cell = row.insertCell(i);
            let currentValue = currentDataBank[dataIndex][Object.keys(currentDataBank[dataIndex])[i]];
            if (i === 0) {
              // Dimension Value
              cell.innerHTML = "<td>" + currentValue + "</td>";
            } else {
              // Metric Value
              if (currentValue === null || currentValue === "") {
                cell.innerHTML = "<td>?</td>";
              } else if (typeof currentValue === "object") {
                if (currentValue.length > 0) {
                  cell.innerHTML = "<td>" + Object.keys(currentDataBank[dataIndex])[i] + " - [" + currentValue.length + "]</td>";
                } else {
                  cell.innerHTML = "<td>" + Object.keys(currentDataBank[dataIndex])[i] + " - [1]</td>";
                }
              } else {
                cell.innerHTML = "<td>" + currentValue + "</td>";
              }
            }
          }
        }
      }
      //
      function ClearViewCommand() {
        for (let rowIndex = 0; rowIndex < analyticsTableBody.rows.length; rowIndex++) {
          analyticsTableBody.deleteRow(rowIndex);
          rowIndex--;
        }
        if (analyticsTableHead.rows.length > 0) {
          for (let headIndex = 0; headIndex < analyticsTableHead.rows.length; headIndex++) {
            const element = analyticsTableHead.rows[headIndex];
            analyticsTableHead.deleteRow(0);
            headIndex--;
          }
        }
      }
      //
      function TableSegmentListener() {
        window.dataBankSelection = entityBank;
        //
        for (let index = 0; index < window.analyticsComponents[2].children.length; index++) {
          const element = window.analyticsComponents[2].children[index];
          window.analyticsSegmentArray[index].innerText = window.dataBank[index].title;
          element.addEventListener("click", () => {
            console.log("Segment clicked " + window.dataBank[index].title);
            window.dataBankSelection = window.dataBank[index].bank;
            //
            if (window.currentViewToggleState.innerText === "Table") {
              ExecuteViewCommand();
            }
          });
        }
      }
      //
      function ComponentDragAssignment() {
        for (let index = 0; index < analyticsDimensionArray.length; index++) {
          const element = analyticsDimensionArray[index];
          //
          element.addEventListener("dragstart", () => {
            console.log("Drag-Start : " + element.innerText);
          });
          element.addEventListener("dragend", () => {
            console.log("Drag-End : " + element.innerText);
          });
        }
        //
        window.analyticsDimensionZone = document.getElementById("analytics-component-zone");
      }
      //
      addEventListener("DOMContentLoaded", (event) => {
        SwitchAnalyticsView();
        TableSegmentListener();
        ComponentDragAssignment();
      });
    </script>

    <script>
      /*
			{
			"columns": {
				"dimension": {
					"id": "variables/page",
					"type": "string"
				},
				"columnIds": [
					"0",
					"1"
				]
			},
			"rows": [
				{
					"itemId": "2743427036",
					"value": "vfy:ana sayfa",
					"data": [
						92199962,
						73076860
					]
				},
				{
					"itemId": "2010129167",
					"value": "vfy:firsatlar dunyasi",
					"data": [
						29463095,
						23987885
					]
				},
				{
					"itemId": "1502297406",
					"value": "vfy:overlay:popup",
					"data": [
						21938459,
						19301484
					]
				},
				{
					"itemId": "134948295",
					"value": "vfy:kullanimlarim:kalan kullanimlarim",
					"data": [
						19739531,
						9305198
					]
				},
				{
					"itemId": "2663219153",
					"value": "vfy:firsatlar dunyasi:cark",
					"data": [
						15528857,
						14716680
					]
				},
				{
					"itemId": "1930672915",
					"value": "vfy:firsatlar dunyasi:cark:bu haftaki hediyem",
					"data": [
						14366528,
						11204860
					]
				}
			],
			"summaryData": {
				"filteredTotals": [
					487336741,
					85855502
				],
				"annotations": [],
				"totals": [
					712184231,
					95749014
				],
				"annotationExceptions": [],
				"col-max": [
					92199962,
					73076860
				],
				"col-min": [
					1,
					1
				]
			}
		}
			*/
    </script>
  </body>
</html>
