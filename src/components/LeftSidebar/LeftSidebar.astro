---
import { SIDEBAR } from "../../consts";

type Props = {
	currentPage: string;
};

const { currentPage } = Astro.props;
const baseFolderURL = currentPage.split("/").slice(1, 2).join("/");
const sidebar = SIDEBAR["en"];
---

<nav aria-label="Primary">
	<div class="TabGroup"><button class="active">Documentation</button></div>
	<ul class="nav-groups">
		{
			Object.entries(sidebar).map(([header, children]) => (
				<li class="nav-group learn active">
					<details>
						<summary class="nav-group-title">
							<h2>
								{header}
								<svg
									xmlns="http://www.w3.org/2000/svg"
									viewBox="0 1 16 16"
									width="16"
									aria-hidden="true"
								>
									<path
										fill-rule="evenodd"
										d="M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z"
									/>
								</svg>
							</h2>
						</summary>
						<ul>
							{children.map((child) => {
								const url =
									"/" +
									baseFolderURL +
									"/" +
									header.toLowerCase().split(" ").join("-") +
									"/" +
									child.link;
								return (
									<li class="nav-link">
										<a
											href={url}
											data-current-parent="false"
											aria-current="false"
										>
											{child.text}
										</a>
									</li>
								);
							})}
						</ul>
					</details>
				</li>
			))
		}
	</ul>
</nav>

<script is:inline>
	window.addEventListener("DOMContentLoaded", () => {
		window.sideDetail = document.querySelectorAll("details");
		for (let index = 0; index < sideDetail.length; index++) {
			const element = window.sideDetail[index];
			if (
				index === 0 ||
				index === 1 ||
				index === 2 ||
				location.pathname.includes(
					element.innerText.trim().toLowerCase().split(" ").join("-")
				)
			) {
				element.setAttribute("open", "");
				window.sideDetailBreakdown =
					element.querySelectorAll("ul li a");
				//
				for (
					let breakdownIndex = 0;
					breakdownIndex < window.sideDetailBreakdown.length;
					breakdownIndex++
				) {
					const breakdownElement =
						window.sideDetailBreakdown[breakdownIndex];
					if (
						location.pathname.includes(
							breakdownElement.innerText
								.trim()
								.toLowerCase()
								.split(" ")
								.join("-")
						)
					) {
						breakdownElement.setAttribute(
							"data-current-parent",
							"true"
						);
						breakdownElement.setAttribute("aria-current", "page");
					}
				}
			}
		}
		//
		var target = document.querySelector('[aria-current="page"]');
		if (target && target.offsetTop > window.innerHeight - 300) {
			document.querySelector(".nav-groups").scrollTop =
				target.offsetTop - window.innerHeight * 0.4;
		}
	});
</script>

<style>
	nav {
		width: 100%;
		margin-right: 1rem;
		font-size: var(--theme-text-sm);
	}
	.nav-group {
		margin-bottom: 1rem;
	}
	.nav-groups {
		padding-top: 1rem;
		max-height: 100%;
		overflow-x: visible;
		overflow-y: auto;
	}
	.nav-group.active {
		display: block;
	}

	.nav-groups > li + li {
		margin-top: 2rem;
	}

	.nav-groups > :first-child {
		padding-top: var(--doc-padding);
	}

	.nav-groups > :last-child {
		padding-bottom: 2rem;
		margin-bottom: var(--theme-navbar-height);
	}

	.TabGroup {
		display: flex;
		border-bottom: 4px solid var(--theme-divider);
	}
	.TabGroup .active,
	.TabGroup [aria-selected="true"] {
		color: var(--theme-text);
		border-bottom-color: var(--theme-accent);
		font-weight: bold;
		font-size: 20px;
	}
	.TabGroup button,
	.TabGroup a {
		flex: 1;
		justify-content: center;
		white-space: nowrap;
		border-radius: 0;
		cursor: pointer;
		padding: 0.6rem 1rem;
		color: var(--theme-text-light);
		border-bottom: 4px solid transparent;
		margin-bottom: -4px;
		background-color: transparent;
		text-decoration: none;
	}

	details > summary {
		list-style: none;
		display: flex;
		gap: 5px;
	}

	details[open] > summary svg {
		transform: rotate(90deg);
	}

	svg {
		transform: rotate(0);
		transition: 0.2s transform ease;
		vertical-align: middle;
	}
	svg path {
		fill: currentColor;
	}
	.nav-group-title {
		font-size: 1em;
		font-weight: bolder;
		padding: 0.3rem 2rem;
	}
	summary {
		cursor: pointer;
	}
	summary h2 {
		all: inherit;
		margin: 0;
		padding: 0;
	}
	.nav-link a {
		font-size: 1rem;
		margin: 1px;
		padding: 0.3rem 1rem;
		font: inherit;
		color: var(--theme-accent);
		text-decoration: none;
		display: block;
		/* font-weight: 500; */
	}

	.nav-link a:hover,
	.nav-link a:focus {
		background-color: var(--theme-bg-hover);
	}

	.nav-link a[aria-current="page"] {
		color: var(--theme-text-accent);
		background-color: var(--theme-bg-accent);
		font-weight: 600;
	}

	@media (min-width: 50em) {
		.nav-groups {
			position: fixed;
			top: calc(var(--theme-navbar-height) + 3rem);
			bottom: 0;
			width: calc(
				var(--theme-left-sidebar-width) - var(--min-spacing-inline) *
					1.6
			);
		}
		.nav-group-title {
			padding: 0.2rem 1rem;
		}
		.nav-link a {
			padding: 0.25rem 1.25rem;
		}
		.nav-group {
			display: none;
			margin-bottom: 1.75rem;
		}
	}
</style>

<style is:global>
	:root.theme-dark .nav-link a[aria-current="page"] {
		color: hsla(var(--color-base-white), 100%, 1);
	}
</style>
